test("websql", function() {		var table = { name: "table", pk: "id" };	var db = new websql.Db("db");		equal(db.typeToDb(true), 1);		equal(db.typeToDb(new Date(2013,11,1,12,30,31)), "2013-12-01T11:30:31.000Z");			var table = {		columns: {			task: { type: 'text', required: true, unique: true },			duedate: 'date',			completed: 'boolean',			amount: 'decimal'		}	};		var sql = "create table if not exists todos(id INTEGER PRIMARY KEY  AUTOINCREMENT, task text not null unique, duedate datetime, completed boolean, amount numeric)";	var qry = db.createTable("todos", table.columns, true);	equal(qry.sql.toLowerCase(), sql.toLowerCase());	});asyncTest( "websql async methods", function() {	expect( 5 );		var db = new websql.Db("db");	var date = new Date(2013,11,1,12,30,31);	var sqls = [				"drop table if exists todos",								"create table todos (num integer primary key, task text, duedate text)",				[ 'insert into todos (num, task, duedate) values (?, ?, ?)', 1, "task-1", date ]							];				db.runSqls(sqls)	.then(function(res, tx) {		ok( true, "exec create table todos and insert should succed" );		//2		return db.exec("select * from todos");	})	.done(function(res, tx) {		equal(res.length, 1, "total todos : 1");//3		equal(res[0].num, 1, "todo.num = 1");//4		equal(res[0].task, "task-1", "todo.task = task-1");//5		equal(res[0].duedate.toISOString(), date.toISOString(), "todo.duedate = "+ date.toISOString());//6			}).then(function() {		start();			});  });var model = { 	tables: { 		todos: {			task: 'text', duedate: 'date', completed: 'boolean'		}	}}asyncTest( "websql async load model", function() {	expect( 1 );	var db = new websql.Db("db");		db.runSqls([		"drop table if exists _models",		"create table _models( id INTEGER PRIMARY KEY  AUTOINCREMENT, model text)",		["insert into _models (model) values(?)", JSON.stringify(model) ]	])	.then(function(res, tx) {		return db.loadModel(tx);	})	.then(function(res, tx) {		deepEqual(db.model, model);		return db.forward(res, tx);	})	.always(function() {		start();			});  });asyncTest( "websql async upgrade model", function() {	expect( 3 );		var db = new websql.Db("db");  	db.debug = true;	db.runSqls(["drop table if exists _models", "drop table if exists contacts", "drop table if exists todos"])	.then(function(res, tx) {		return db.upgrade(model, tx);	})	.then(function(res, tx) {		return db.reloadModel(tx);			})	.then(function(res, tx) {		deepEqual(db.model, model);//1				model.tables.todos.amount = 'decimal';		model.tables.contacts = {			name: 'text', age: 'int'		}		return db.upgrade(model, tx);		})	.then(function(res, tx) {				return db.reloadModel(tx);			})	.then(function(res, tx) {		return db.reloadModel(tx);			})	.then(function(res, tx) {		deepEqual(db.model, model);	//2		return db.runQueries([			db.todos.insert({ task: "task"}),			db.contacts.insert({ name: "contact"})		]);			}).then(function(res, tx) {				return db.runQueries([						db.contacts.update({ name: "yassine"}, res),					]);			})	.then(function(res, tx) {		return db.contacts.first(tx);	})	.then(function(res, tx) {		equal(res.name, "yassine");//3	})	.always(function() {		start();			});});